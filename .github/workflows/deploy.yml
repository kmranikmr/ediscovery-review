name: Deploy to Azure VM

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.12'
  APP_NAME: 'llm-retrieval-system'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies for testing
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run basic syntax check
      run: |
        python -m py_compile main.py
        python -m py_compile streamlit_app.py
    
    - name: Deploy to Azure VM
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.AZURE_VM_HOST }}
        username: ${{ secrets.AZURE_VM_USERNAME }}
        key: ${{ secrets.AZURE_VM_SSH_KEY }}
        port: ${{ secrets.AZURE_VM_PORT || 22 }}
        script: |
          # Navigate to application directory
          cd /home/${{ secrets.AZURE_VM_USERNAME }}/${{ env.APP_NAME }} || {
            echo "Creating application directory..."
            mkdir -p /home/${{ secrets.AZURE_VM_USERNAME }}/${{ env.APP_NAME }}
            cd /home/${{ secrets.AZURE_VM_USERNAME }}/${{ env.APP_NAME }}
          }
          
          # Backup current deployment
          if [ -f "main.py" ]; then
            echo "Creating backup of current deployment..."
            mkdir -p backups/$(date +%Y%m%d_%H%M%S)
            cp -r . backups/$(date +%Y%m%d_%H%M%S)/ 2>/dev/null || true
          fi
          
          # Clone or pull latest code
          if [ -d ".git" ]; then
            echo "Pulling latest changes..."
            git fetch origin
            git reset --hard origin/main
          else
            echo "Cloning repository..."
            git clone https://github.com/${{ github.repository }} .
          fi
          
          # Setup virtual environment
          echo "Setting up Python virtual environment..."
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi
          source venv/bin/activate
          
          # Upgrade pip and install dependencies
          echo "Installing dependencies..."
          pip install --upgrade pip
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi
          
          # Install additional packages if needed
          pip install streamlit fastapi uvicorn python-multipart
          
          # Stop existing services
          echo "Stopping existing services..."
          pkill -f "python.*main.py" || true
          pkill -f "streamlit.*run" || true
          sleep 5
          
          # Start FastAPI server
          echo "Starting FastAPI server..."
          source venv/bin/activate
          nohup python main.py > logs/main.log 2>&1 &
          
          # Wait for FastAPI to start
          sleep 10
          
          # Start Streamlit app
          echo "Starting Streamlit application..."
          nohup streamlit run streamlit_app.py --server.port=8501 --server.address=0.0.0.0 > logs/streamlit.log 2>&1 &
          
          # Create logs directory if it doesn't exist
          mkdir -p logs
          
          # Check if services are running
          echo "Checking service status..."
          if pgrep -f "python.*main.py" > /dev/null; then
            echo "‚úÖ FastAPI server is running"
          else
            echo "‚ùå FastAPI server failed to start"
            exit 1
          fi
          
          if pgrep -f "streamlit.*run" > /dev/null; then
            echo "‚úÖ Streamlit app is running"
          else
            echo "‚ùå Streamlit app failed to start"
            exit 1
          fi
          
          echo "üöÄ Deployment completed successfully!"
          echo "FastAPI: http://${{ secrets.AZURE_VM_HOST }}:8001"
          echo "Streamlit: http://${{ secrets.AZURE_VM_HOST }}:8501"

  mirror-to-secondary-repo:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: deploy
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Mirror to secondary repository
      uses: pixta-dev/repository-mirroring-action@v1
      with:
        target_repo_url: ${{ secrets.MIRROR_REPO_URL }}
        ssh_private_key: ${{ secrets.MIRROR_SSH_KEY }}
